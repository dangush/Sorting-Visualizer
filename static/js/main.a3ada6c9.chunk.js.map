{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","bubbleSortAlgo","array","temp","changes","i","length","j","push","console","log","getRandomArbitrary","min","max","Math","floor","random","SortingVisualizer","state","resetArray","setState","bubbleSort","bars","document","getElementsByClassName","setTimeout","barOneStyle","style","height","barTwoStyle","backgroundColor","testSortAlgo","sortedArray","slice","sort","a","b","this","one","two","className","map","value","idx","key","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a3ada6c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function bubbleSortAlgo(array) {\r\n  let temp;\r\n  let changes = [];\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        changes.push([j, j + 1]);\r\n        temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n    }\r\n  }\r\n  console.log(\"created changes\");\r\n  return changes;\r\n}\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { bubbleSortAlgo } from \"../sortingAlgorithms/sortingAlgorithms.js\";\r\n\r\nclass SortingVisualizer extends React.Component {\r\n  state = {\r\n    array: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray = () => {\r\n    const array = [];\r\n    for (let i = 0; i < 300; i++) {\r\n      array[i] = getRandomArbitrary(5, 600);\r\n    }\r\n    this.setState({ array });\r\n  };\r\n\r\n  bubbleSort = () => {\r\n    const bars = document.getElementsByClassName(\"array-bar\");\r\n    const changes = bubbleSortAlgo(this.state.array);\r\n    for (let i = 0; i < changes.length; i++) {\r\n      setTimeout(() => {\r\n        let barOneStyle = bars[changes[i][0]].style;\r\n        console.log(\"This is \" + barOneStyle.height);\r\n        let barTwoStyle = bars[changes[i][1]].style;\r\n        console.log(\"The second is \" + barTwoStyle.height);\r\n        let temp;\r\n\r\n        barOneStyle.backgroundColor = \"red\";\r\n        barTwoStyle.backgroundColor = \"green\";\r\n        temp = barOneStyle.height;\r\n        console.log(\"got here\");\r\n        barOneStyle.height = barTwoStyle.height;\r\n        barTwoStyle.height = temp;\r\n\r\n        barOneStyle.backgroundColor = \"blue\";\r\n        barTwoStyle.backgroundColor = \"blue\";\r\n      }, i * 1);\r\n    }\r\n  };\r\n\r\n  swap(one, two) {\r\n    let temp = one;\r\n    one = two;\r\n    two = temp;\r\n\r\n    return one, two;\r\n  }\r\n\r\n  testSortAlgo = () => {\r\n    const sortedArray = this.state.array.slice().sort((a, b) => a - b);\r\n    const bubbleSort = bubbleSortAlgo(this.state.array);\r\n    if (sortedArray.length !== bubbleSort.length) return false;\r\n    for (let i = 0; i < sortedArray.length; i++) {\r\n      if (sortedArray[i] !== bubbleSort[i]) {\r\n        console.log(\"NOPE\");\r\n        return false;\r\n      }\r\n    }\r\n    console.log(\"NICE\");\r\n  };\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{ height: `${value}px` }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"button-container\">\r\n          <button className=\"button\" onClick={this.resetArray}>\r\n            Generate New Array\r\n          </button>\r\n          <button className=\"button\" onClick={this.bubbleSort}>\r\n            Bubble Sort\r\n          </button>\r\n          <button className=\"button\" onClick={this.resetArray}>\r\n            Merge Sort\r\n          </button>\r\n          <button className=\"button\" onClick={this.resetArray}>\r\n            Insertion Sort\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}